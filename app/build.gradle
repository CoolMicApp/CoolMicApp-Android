import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def versionPropertiesFile = projectDir.toPath().resolve("version.properties").toFile()

// Initialize a new Properties() object called keystoreProperties.
def versionProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
versionProperties.load(new FileInputStream(versionPropertiesFile))

Integer versionMajor = versionProperties['versionMajor'] as Integer
Integer versionMinor = versionProperties['versionMinor'] as Integer
Integer versionPatch = versionProperties['versionPatch'] as Integer

String versionNameTmp = "${versionMajor}.${versionMinor}.${versionPatch}"
Integer versionCodeTmp = versionMajor * 10000 + versionMinor * 100 + versionPatch

task appVersion {
    doLast {
        println "${versionNameTmp}-${versionCodeTmp}"
    }
}

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "cc.echonet.coolmicapp"
        versionCode versionCodeTmp
        versionName versionNameTmp

        minSdkVersion 16
        targetSdkVersion 29

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "GIT_REVISION", "\"${gitRevision()}\""
        buildConfigField "String", "GIT_BRANCH", "\"${gitBranch()}\""
        buildConfigField "String", "GIT_AUTHOR", "\"${gitAuthor()}\""
        buildConfigField "String", "GIT_DIRTY", "\"${gitDirty()}\""
        buildConfigField "String", "BUILD_TS", "\"${buildTimeStamp()}\""
        buildConfigField "String", "HTTP_PRODUCT", "\"CoolMic\""
        buildConfigField "String", "HTTP_VERSION", "VERSION_NAME"
        buildConfigField "String", "HTTP_COMMENT", "\"build-ts:\" + BUILD_TS + \"; git-rev:\" + GIT_REVISION"

        // `return void` removes the lint error: `Not all execution paths return a value`.
        return void
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            resValue "string", "app_version","${defaultConfig.versionName}"
        }
        debug {
            versionNameSuffix ".debug"
            resValue "string", "app_version","${defaultConfig.versionName}${versionNameSuffix}"
        }
    }
    flavorDimensions "version"
    productFlavors {
        defaultConfig {
            dimension "version"
        }
        debugdev {
            dimension "version"
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
    }
    externalNativeBuild {
        cmake  {
            path 'src/main/jni/CMakeLists.txt'
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    buildToolsVersion = '28.0.3'
}

static def gitRevision() {
    try {
        return "git rev-parse HEAD".execute().text.trim()
    }
    catch(Exception ignored)
    {
        return "N/A"
    }
}

static def gitBranch() {
    try {
        return "git rev-parse --symbolic-full-name HEAD".execute().text.trim()
    }
    catch(Exception ignored)
    {
        return "N/A"
    }
}

static def gitAuthor() {
    try {
        return "git --no-pager show -s --format=\"%aN <%aE>\" HEAD".execute().text.trim()
    }
    catch(Exception ignored)
    {
        return "N/A"
    }
}

static def gitDirty() {
    try {
        if ("git status --porcelain".execute().text.trim().isEmpty()) {
            return "false"
        } else {
            return "true"
        }
    }
    catch(Exception ignored)
    {
        return "N/A"
    }
}

static def buildTimeStamp() {
    try {
        def df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z") //you can change it
        df.setTimeZone(TimeZone.getTimeZone("UTC"))
        return df.format(new Date())
    }
    catch(Exception ignored)
    {
        return "N/A"
    }
}

dependencies {
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.zxing:android-integration:3.2.1'
    api 'androidx.annotation:annotation:1.1.0'

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    // Optional -- Hamcrest library
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    // Optional -- UI testing with Espresso
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'


    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'org.jetbrains:annotations:19.0.0'
}
